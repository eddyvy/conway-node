/*
  Game of Life

  - Cell with 0 or 1 neighbours die of loneliness
  - Cell with 2 or 3 neighbours survive
  - Cell with 4 or more neighbours die of overcrowding
  - Cell with exactly 3 neighbours becomes a live cell
*/
const iniciales = [
  `
·······································
·······································
················OO·····················
················OO·····················
·······································
·······································
·······································
···············OOOO····················
·······································
·······································
·······································
·······································
················O······················
················OO·····················
·················O·····················
·······································
·······································
·······································
·······································
················O······················
················OOO····················
·······································
·······································
·······································
·······································
·······································
·······································
·······································
················O······················
···············OOO·····················
·······································
·······································
·······································
·······································
·······································
·······································
·······································`,
  `
·······································
·······································
·······································
·······································
·······································
·······································
·······································
·······································
·······································
·······································
·······································
··················O····················
···················O···················
·················OOO···················
·······································
·······································
·······································
·······································
·······································
·······································
·······································
·······································
·······································
·······································
·······································
·······································`,
  `
·······································································
·······································································
·······································································
·······································································
·······································································
·······································································
·······································································
·······································································
·····································O·································
···································O·O·································
·························OO······OO············OO······················
························O···O····OO············OO······················
·············OO········O·····O···OO····································
·············OO········O···O·OO····O·O·································
·······················O·····O·······O·································
························O···O··········································
·························OO············································
·······································································
·······································································
·······································································
·······································································
·······································································
·······································································
·······································································
·······································································
·······································································
·······································································
·······································································
·······································································
·······································································
·······································································
·······································································
·······································································`,
]

class Tablero {
  constructor(inicio) {
    this.pasos = 0
    this.tablero = inicio
      .slice(1)
      .split('\n')
      .map((l) => l.split(''))
  }

  draw() {
    console.clear()
    console.log(
      this.tablero
        .map((l) => l.map((c) => (c === 'O' ? '🟩' : '⬛')).join(''))
        .join('\n')
    )
    console.log('Paso:', this.pasos)
  }

  next() {
    const newTablero = this.tablero.map((fila) => new Array(fila.length))

    for (let fila = 0; fila < this.tablero.length; fila++) {
      for (let columna = 0; columna < this.tablero[fila].length; columna++) {
        const celda = this.tablero[fila][columna]
        const vecinosVivos = this.contarVecinosVivos(fila, columna)

        if (celda === 'O') {
          if (vecinosVivos === 0 || vecinosVivos === 1 || vecinosVivos >= 4) {
            newTablero[fila][columna] = '·'
          } else {
            newTablero[fila][columna] = 'O'
          }
        }

        if (celda === '·') {
          if (vecinosVivos === 3) {
            newTablero[fila][columna] = 'O'
          } else {
            newTablero[fila][columna] = '·'
          }
        }
      }
    }

    this.tablero = newTablero
    this.pasos++
  }

  contarVecinosVivos(f, c) {
    let vecinosVivos = 0

    for (let i = -1; i <= 1; i++) {
      for (let j = -1; j <= 1; j++) {
        const fila = f + i
        const columna = c + j

        if (i === 0 && j === 0) {
          continue
        }

        if (fila < 0 || columna < 0) {
          continue
        }

        if (
          fila >= this.tablero.length ||
          columna >= this.tablero[fila].length
        ) {
          continue
        }

        if (this.tablero[fila][columna] === 'O') {
          vecinosVivos++
        } else {
        }
      }
    }

    return vecinosVivos
  }
}

function leerTablero() {
  const num = Number(process.argv[2])

  var inicio

  if (!num || num < 0 || num > iniciales.length - 1) {
    inicio = iniciales[0]
  } else {
    inicio = iniciales[num]
  }

  return new Tablero(inicio)
}

function comenzarJuego(tablero) {
  setTimeout(() => {
    tablero.draw()
    tablero.next()
    comenzarJuego(tablero)
  }, 100)
}

function main() {
  console.log('¡Empezamos el juego!')
  const tablero = leerTablero()
  comenzarJuego(tablero)
}

main()
